import{l as u,s,V as d}from"./index-DMTdQ3St.js";const y=u((r,p)=>({expenses:[],selectedExpense:null,categories:[],loading:!1,error:null,fetchExpenses:async a=>{try{r({loading:!0,error:null});const{data:e,error:o}=await s.from("expenses").select(`
          *,
          category:category_id(id, name, color),
          client:client_id(name, company_name)
        `).eq("user_id",a).order("date",{ascending:!1});if(o)throw o;r({expenses:e})}catch(e){console.error("Error fetching expenses:",e),r({error:e.message||"Failed to fetch expenses"})}finally{r({loading:!1})}},fetchExpense:async a=>{try{r({loading:!0,error:null});const{data:e,error:o}=await s.from("expenses").select(`
          *,
          category:category_id(id, name, color),
          client:client_id(name, company_name)
        `).eq("id",a).single();if(o)throw o;r({selectedExpense:e})}catch(e){console.error("Error fetching expense:",e),r({error:e.message||"Failed to fetch expense"})}finally{r({loading:!1})}},createExpense:async a=>{try{r({loading:!0,error:null});const{data:e,error:o}=await s.from("expenses").insert([a]).select(`
          *,
          category:category_id(id, name, color),
          client:client_id(name, company_name)
        `).single();if(o)throw o;const n=e;return r(t=>({expenses:[n,...t.expenses]})),n}catch(e){return console.error("Error creating expense:",e),r({error:e.message||"Failed to create expense"}),null}finally{r({loading:!1})}},updateExpense:async(a,e)=>{try{r({loading:!0,error:null});const{data:o,error:n}=await s.from("expenses").update(e).eq("id",a).select(`
          *,
          category:category_id(id, name, color),
          client:client_id(name, company_name)
        `).single();if(n)throw n;const t=o;r(l=>{var c;return{expenses:l.expenses.map(i=>i.id===a?t:i),selectedExpense:((c=l.selectedExpense)==null?void 0:c.id)===a?t:l.selectedExpense}})}catch(o){console.error("Error updating expense:",o),r({error:o.message||"Failed to update expense"})}finally{r({loading:!1})}},deleteExpense:async a=>{try{r({loading:!0,error:null});const e=p().expenses.find(n=>n.id===a),{error:o}=await s.from("expenses").delete().eq("id",a);if(o)throw o;if(e!=null&&e.receipt_url){const n=e.receipt_url.split("/").pop();n&&await s.storage.from("receipts").remove([n])}r(n=>{var t;return{expenses:n.expenses.filter(l=>l.id!==a),selectedExpense:((t=n.selectedExpense)==null?void 0:t.id)===a?null:n.selectedExpense}}),d.success("Expense deleted successfully")}catch(e){console.error("Error deleting expense:",e),r({error:e.message||"Failed to delete expense"}),d.error("Failed to delete expense")}finally{r({loading:!1})}},fetchCategories:async a=>{try{r({loading:!0,error:null});const{data:e,error:o}=await s.from("expense_categories").select("*").eq("user_id",a).order("name",{ascending:!0});if(o)throw o;r({categories:e})}catch(e){console.error("Error fetching expense categories:",e),r({error:e.message||"Failed to fetch expense categories"})}finally{r({loading:!1})}},createCategory:async a=>{try{r({loading:!0,error:null});const{data:e,error:o}=await s.from("expense_categories").insert([a]).select().single();if(o)throw o;const n=e;return r(t=>({categories:[...t.categories,n]})),n}catch(e){return console.error("Error creating expense category:",e),r({error:e.message||"Failed to create expense category"}),null}finally{r({loading:!1})}},updateCategory:async(a,e)=>{try{r({loading:!0,error:null});const{data:o,error:n}=await s.from("expense_categories").update(e).eq("id",a).select().single();if(n)throw n;const t=o;r(l=>({categories:l.categories.map(c=>c.id===a?t:c)}))}catch(o){console.error("Error updating expense category:",o),r({error:o.message||"Failed to update expense category"})}finally{r({loading:!1})}},deleteCategory:async a=>{try{r({loading:!0,error:null});const{error:e}=await s.from("expense_categories").delete().eq("id",a);if(e)throw e;r(o=>({categories:o.categories.filter(n=>n.id!==a)})),d.success("Category deleted successfully")}catch(e){console.error("Error deleting expense category:",e),r({error:e.message||"Failed to delete expense category"}),d.error("Failed to delete category")}finally{r({loading:!1})}},uploadReceipt:async(a,e)=>{try{if(r({loading:!0,error:null}),a.size>5*1024*1024)throw new Error("Receipt file size must be less than 5MB");if(!["image/jpeg","image/png","image/gif","application/pdf"].includes(a.type))throw new Error("Receipt must be an image (JPEG, PNG, GIF) or PDF");const n=new Date().getTime(),t=a.name.split(".").pop(),l=`${e}/${n}_${Math.random().toString(36).substring(2,15)}.${t}`,{data:c,error:i}=await s.storage.from("receipts").upload(l,a,{cacheControl:"3600",upsert:!1});if(i)throw i;const{data:g}=s.storage.from("receipts").getPublicUrl(l);return g.publicUrl}catch(o){return console.error("Error uploading receipt:",o),r({error:o.message||"Failed to upload receipt"}),null}finally{r({loading:!1})}}}));export{y as u};
