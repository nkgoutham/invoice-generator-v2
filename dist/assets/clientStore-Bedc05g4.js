import{l as f,s as t}from"./index-DMTdQ3St.js";const w=f((r,h)=>({clients:[],selectedClient:null,engagementModel:null,documents:[],loading:!1,error:null,fetchClients:async o=>{try{r({loading:!0,error:null});const{data:e,error:l}=await t.from("clients").select("*").eq("user_id",o).order("created_at",{ascending:!1});if(l)throw l;r({clients:e})}catch(e){console.error("Fetch clients error:",e),r({error:e.message||"Failed to fetch clients"})}finally{r({loading:!1})}},getClient:async o=>{try{r({loading:!0,error:null});const{data:e,error:l}=await t.from("clients").select("*").eq("id",o).single();if(l)throw l;return e}catch(e){return console.error("Get client error:",e),r({error:e.message||"Failed to get client"}),null}finally{r({loading:!1})}},fetchClient:async o=>{try{r({loading:!0,error:null});const{data:e,error:l}=await t.from("clients").select("*").eq("id",o).single();if(l)throw l;r({selectedClient:e})}catch(e){console.error("Fetch client error:",e),r({error:e.message||"Failed to fetch client"})}finally{r({loading:!1})}},fetchEngagementModel:async o=>{try{r({loading:!0,error:null});const{data:e,error:l}=await t.from("engagement_models").select("*").eq("client_id",o).maybeSingle();if(l)throw l;r({engagementModel:e||null})}catch(e){console.error("Fetch engagement model error:",e),r({error:e.message||"Failed to fetch engagement model"}),r({engagementModel:null})}finally{r({loading:!1})}},fetchDocuments:async o=>{try{r({loading:!0,error:null});const{data:e,error:l}=await t.from("documents").select("*").eq("client_id",o).order("created_at",{ascending:!1});if(l)throw l;r({documents:e})}catch(e){console.error("Fetch documents error:",e),r({error:e.message||"Failed to fetch documents"})}finally{r({loading:!1})}},createClient:async o=>{try{r({loading:!0,error:null});const{data:e,error:l}=await t.from("clients").insert([o]).select().single();if(l)throw l;return r(n=>({clients:[e,...n.clients],selectedClient:e})),e}catch(e){return console.error("Create client error:",e),r({error:e.message||"Failed to create client"}),null}finally{r({loading:!1})}},updateClient:async(o,e)=>{try{r({loading:!0,error:null});const{data:l,error:n}=await t.from("clients").update(e).eq("id",o).select().single();if(n)throw n;const a=l;r(i=>{var c;return{clients:i.clients.map(d=>d.id===o?a:d),selectedClient:((c=i.selectedClient)==null?void 0:c.id)===o?a:i.selectedClient}})}catch(l){console.error("Update client error:",l),r({error:l.message||"Failed to update client"})}finally{r({loading:!1})}},deleteClient:async o=>{try{r({loading:!0,error:null});const{error:e}=await t.from("clients").delete().eq("id",o);if(e)throw e;r(l=>{var n;return{clients:l.clients.filter(a=>a.id!==o),selectedClient:((n=l.selectedClient)==null?void 0:n.id)===o?null:l.selectedClient}})}catch(e){console.error("Delete client error:",e),r({error:e.message||"Failed to delete client"})}finally{r({loading:!1})}},createEngagementModel:async o=>{try{r({loading:!0,error:null});const{data:e,error:l}=await t.from("engagement_models").insert([o]).select().single();if(l)throw l;r({engagementModel:e})}catch(e){console.error("Create engagement model error:",e),r({error:e.message||"Failed to create engagement model"})}finally{r({loading:!1})}},updateEngagementModel:async(o,e)=>{try{r({loading:!0,error:null});const{data:l,error:n}=await t.from("engagement_models").update(e).eq("id",o).select().single();if(n)throw n;r({engagementModel:l})}catch(l){console.error("Update engagement model error:",l),r({error:l.message||"Failed to update engagement model"})}finally{r({loading:!1})}},uploadDocument:async(o,e,l,n)=>{try{r({loading:!0,error:null});const a=e.name.split(".").pop(),c=`${`${o}/${Date.now()}.${a}`}`,{error:d}=await t.storage.from("documents").upload(c,e);if(d)throw d;const{data:g}=t.storage.from("documents").getPublicUrl(c),{data:m,error:s}=await t.from("documents").insert([{client_id:o,name:n,file_url:g.publicUrl,type:l}]).select().single();if(s)throw s;r(u=>({documents:[m,...u.documents]}))}catch(a){console.error("Upload document error:",a),r({error:a.message||"Failed to upload document"})}finally{r({loading:!1})}},deleteDocument:async o=>{try{r({loading:!0,error:null});const{data:e,error:l}=await t.from("documents").select("*").eq("id",o).single();if(l)throw l;const{error:n}=await t.from("documents").delete().eq("id",o);if(n)throw n;const i=e.file_url.split("/").slice(-2).join("/");i&&await t.storage.from("documents").remove([i]),r(c=>({documents:c.documents.filter(d=>d.id!==o)}))}catch(e){console.error("Delete document error:",e),r({error:e.message||"Failed to delete document"})}finally{r({loading:!1})}}}));export{w as u};
