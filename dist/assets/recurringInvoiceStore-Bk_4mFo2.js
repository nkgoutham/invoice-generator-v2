import{l as y,s}from"./index-DMTdQ3St.js";const p=y((r,v)=>({recurringInvoices:[],selectedRecurringInvoice:null,loading:!1,error:null,fetchRecurringInvoices:async n=>{try{r({loading:!0,error:null});const{data:e,error:i}=await s.from("recurring_invoices").select("*, clients(name, company_name)").eq("user_id",n).order("next_issue_date",{ascending:!0});if(i)throw i;r({recurringInvoices:e})}catch(e){console.error("Error fetching recurring invoices:",e),r({error:e.message||"Failed to fetch recurring invoices"})}finally{r({loading:!1})}},fetchRecurringInvoice:async n=>{try{r({loading:!0,error:null});const{data:e,error:i}=await s.from("recurring_invoices").select("*, clients(name, company_name, billing_address, email, phone, gst_number)").eq("id",n).single();if(i)throw i;r({selectedRecurringInvoice:e})}catch(e){console.error("Error fetching recurring invoice:",e),r({error:e.message||"Failed to fetch recurring invoice"})}finally{r({loading:!1})}},createRecurringInvoice:async(n,e,i)=>{try{r({loading:!0,error:null});const{title:c,frequency:a,start_date:l,end_date:u,auto_send:m,...f}=n,I={invoice_data:{...f,status:"draft",user_id:e,client_id:i},invoice_items:n.engagement_type==="milestone"&&n.milestones?n.milestones.map(t=>({description:t.name,quantity:1,rate:t.amount,amount:t.amount,milestone_name:t.name})):n.items};let o=new Date(l);switch(a){case"weekly":o.setDate(o.getDate()+7);break;case"monthly":o.setMonth(o.getMonth()+1);break;case"quarterly":o.setMonth(o.getMonth()+3);break;case"yearly":o.setFullYear(o.getFullYear()+1);break}const _=o.toISOString().split("T")[0],{data:g,error:d}=await s.from("recurring_invoices").insert({user_id:e,client_id:i,title:c,frequency:a,start_date:l,end_date:u||null,next_issue_date:_,template_data:I,status:"active",auto_send:m}).select().single();if(d)throw d;return r(t=>({recurringInvoices:[...t.recurringInvoices,g]})),g}catch(c){return console.error("Error creating recurring invoice:",c),r({error:c.message||"Failed to create recurring invoice"}),null}finally{r({loading:!1})}},updateRecurringInvoice:async(n,e)=>{try{r({loading:!0,error:null});const{data:i,error:c}=await s.from("recurring_invoices").update(e).eq("id",n).select().single();if(c)throw c;r(a=>{var l;return{recurringInvoices:a.recurringInvoices.map(u=>u.id===n?i:u),selectedRecurringInvoice:((l=a.selectedRecurringInvoice)==null?void 0:l.id)===n?i:a.selectedRecurringInvoice}})}catch(i){console.error("Error updating recurring invoice:",i),r({error:i.message||"Failed to update recurring invoice"})}finally{r({loading:!1})}},toggleRecurringInvoiceStatus:async(n,e)=>{await v().updateRecurringInvoice(n,{status:e})},deleteRecurringInvoice:async n=>{try{r({loading:!0,error:null});const{error:e}=await s.from("recurring_invoices").delete().eq("id",n);if(e)throw e;r(i=>{var c;return{recurringInvoices:i.recurringInvoices.filter(a=>a.id!==n),selectedRecurringInvoice:((c=i.selectedRecurringInvoice)==null?void 0:c.id)===n?null:i.selectedRecurringInvoice}})}catch(e){console.error("Error deleting recurring invoice:",e),r({error:e.message||"Failed to delete recurring invoice"})}finally{r({loading:!1})}}}));export{p as u};
